const { cmd } = require("../lib/command");
const yts = require("yt-search");
const axios = require("axios");
const config = require("../settings");

cmd(
  {
    pattern: "poddasong",
    desc: "song MP3 sender to configured JID",
    category: "download",
    react: "üéß",
    filename: __filename,
  },
  async (robin, mek, m, { q, reply }) => {
    try {
      if (!q) return reply("*‡∂î‡∂∫‡∑è‡∂Ω‡∑è ‡∂ú‡∑ì‡∂≠ ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù YouTube ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±...!*");

      const search = await yts(q);
      if (!search.videos.length) return reply("*‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑Ñ‡∂∏‡∑î‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è... ‚ùå*");

      const data = search.videos[0];
      const ytUrl = data.url;
      const ago = data.ago;

      const api = `https://yt-five-tau.vercel.app/download?q=${ytUrl}&format=mp3`;
      const { data: apiRes } = await axios.get(api);

      if (!apiRes?.status || !apiRes.result?.download) {
        return reply("‚ùå ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!");
      }

      const result = apiRes.result;    
        
      const caption = `\`‚òòÔ∏è ·¥õ…™·¥õ ü·¥á\` :${result.title}

\`00:00\` ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∂‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ \`${data.timestamp}\`

‚ùí üìÖ R·¥á ü·¥á·¥ÄÍú±·¥á D·¥Ä·¥õ·¥á : ${ago}
‚ùí üé≠ ·¥†…™·¥á·¥°Íú± : ${data.views}

_üéß Use headphones for best experience üé∏ü©µ_

\`‡∂∏‡∑ö ‡∑Ä‡∂ú‡∑ö ‡∂Ω‡∑É‡∑ä‡∑É‡∂± ‡∑É‡∑í‡∂Ç‡∂Ø‡∑î ‡∑Ñ‡∑ê‡∂∏‡∂Ø‡∑è‡∂∏ ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂± ‡∂∏‡∑ô‡∂±‡∑ä‡∂± ‡∂∏‡∑ô‡∑Ñ‡∑ô‡∂ß ‡∂ë‡∂±‡∑ä‡∂© ‡∂¥‡∑ê‡∂ß‡∑í‡∂∫‡∑ù ü§≠üíï..\`

${config.FOOTER}`;

      // Send thumbnail with captio     
      await robin.sendMessage(
        config.JID,
        {
          image: { url: result.thumbnail },
          caption: caption,
        },
        { quoted: mek }
      );

      // Send PTT Audio
        await new Promise(resolve => setTimeout(resolve, 30000));
       
      await robin.sendMessage(
        config.JID,
        {
          audio: { url: result.download },
          mimetype: "audio/mpeg",
          ptt: true,
        },
        { quoted: mek }
      );

      // Send Confirmation
      await robin.sendMessage(
        mek.key.remoteJid,
        {
          text: `‚úÖ *"${result.title}"* This Song ||*Sendedüòíüëà`,
        },
        { quoted: mek }
      );

    } catch (e) {
      console.error(e);
      reply("*‡∂á‡∂≠‡∑ê‡∂∏‡∑ä ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í! ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*");
    }
  }
);

///===(
cmd(
  {
    pattern: "mypoddasong",
    desc: "song MP3 sender to configured JID",
    category: "download",
    react: "üéß",
    filename: __filename,

  },

  async (robin, mek, m, { q, reply }) => {

    try {

      if (!q) return reply("*‡∂î‡∂∫‡∑è‡∂Ω‡∑è ‡∂ú‡∑ì‡∂≠ ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù YouTube ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±...!*");

      // Check if input is a valid YouTube URL

      const ytRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/.+$/;

      let ytUrl = "";
      if (ytRegex.test(q)) {
        ytUrl = q;
      } else {
        const search = await yts(q);
        if (!search.videos.length) return reply("*‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑Ñ‡∂∏‡∑î‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è... ‚ùå*");
        ytUrl = search.videos[0].url;
      }

      const api = `https://yt-five-tau.vercel.app/download?q=${ytUrl}&format=mp3`;

      const { data: apiRes } = await axios.get(api);
      if (!apiRes?.status || !apiRes.result?.download) {
        return reply("‚ùå ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!");
      }
        
    const result = apiRes.result;
await robin.sendMessage(
        config.JID,
        {
          audio: { url: result.download },
          mimetype: "audio/mpeg",
          ptt: true,
        },

        { quoted: mek }

      );
      // Notify sender

      await robin.sendMessage(
        mek.key.remoteJid,
        {

          text: `‚úÖ *"${result.title}"* This Song || *Sendedüòíüëà`,
        },
        { quoted: mek }
      );
    } catch (e) {
      console.error(e);
      reply("*‡∂á‡∂≠‡∑ê‡∂∏‡∑ä ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í! ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*");
    }
  }
    );
  ////====
    cmd(

  {

    pattern: "poddasong2",
    desc: "song MP3 sender to configured JID",
    category: "download",
    react: "üéß",
    filename: __filename,

  },

  async (robin, mek, m, { q, reply }) => {

    try {

      if (!q) return reply("*‡∂î‡∂∫‡∑è‡∂Ω‡∑è ‡∂ú‡∑ì‡∂≠ ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù YouTube ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±...!*");

      const search = await yts(q);
      if (!search.videos.length) return reply("*‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑Ñ‡∂∏‡∑î‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è... ‚ùå*");

      const data = search.videos[0];
      const ytUrl = data.url;
      const ago = data.ago;

      const api = `https://manul-official-new-api-site.vercel.app/convert?mp3=${encodeURIComponent(ytUrl)}&apikey=Manul-Official`;

      const { data: apiRes } = await axios.get(api);

      if (!apiRes?.status || !apiRes.data?.url) {

        return reply("‚ùå ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!");

      }

      const result = {
        title: data.title,
        thumbnail: data.thumbnail,
        download: apiRes.data.url,
      };
        

      const caption =  `\`‚òòÔ∏è ·¥õ…™·¥õ ü·¥á\` :${result.title}

\`00:00\` ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∂‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ \`${data.timestamp}\`

‚ùí üìÖ R·¥á ü·¥á·¥ÄÍú±·¥á D·¥Ä·¥õ·¥á : ${ago}

‚ùí üé≠ ·¥†…™·¥á·¥°Íú± : ${data.views}

_üéß Use headphones for best experience üé∏ü©µ_

\`‡∂∏‡∑ö ‡∑Ä‡∂ú‡∑ö ‡∂Ω‡∑É‡∑ä‡∑É‡∂± ‡∑É‡∑í‡∂Ç‡∂Ø‡∑î ‡∑Ñ‡∑ê‡∂∏‡∂Ø‡∑è‡∂∏ ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂± ‡∂∏‡∑ô‡∂±‡∑ä‡∂± ‡∂∏‡∑ô‡∑Ñ‡∑ô‡∂ß ‡∂ë‡∂±‡∑ä‡∂© ‡∂¥‡∑ê‡∂ß‡∑í‡∂∫‡∑ù ü§≠üíï..\`

${config.FOOTER}`;
      await robin.sendMessage(
        config.JID,
        {
          image: { url: result.thumbnail },
          caption: caption,
        },
        { quoted: mek }
      );
      // Send PTT Audio
        await new Promise(resolve => setTimeout(resolve, 30000));
      await robin.sendMessage(
        config.JID,
        {
          audio: { url: result.download },
          mimetype: "audio/mpeg",
          ptt: true,
        },
        { quoted: mek }
      );
      // Send Confirmation
      await robin.sendMessage(
        mek.key.remoteJid,
        {
          text: `‚úÖ *"${result.title}"* This Song ||*Sendedüòíüëà`,

        },
        { quoted: mek }
      );
    } catch (e) {
      console.error(e);
      reply("*‡∂á‡∂≠‡∑ê‡∂∏‡∑ä ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑í! ‡∂¥‡∑É‡∑î‡∑Ä ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*");

    }
  }
  );